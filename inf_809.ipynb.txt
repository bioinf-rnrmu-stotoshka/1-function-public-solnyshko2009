{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7d27a0d7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "13\n"
     ]
    }
   ],
   "source": [
    "#Fibbonaci numbers\n",
    "def fib(n):\n",
    "    '''Функция для поиска числа Фиббоначи   \n",
    "    Parameters\n",
    "    ----------\n",
    "    n : number\n",
    "    \n",
    "    Returns\n",
    "    -------\n",
    "    Number\n",
    "        Значение Фиббоначи.'''\n",
    "    if n==0: return 0\n",
    "    elif n==1: return 1\n",
    "    else:\n",
    "        return fib(n-1)+fib(n-2)\n",
    "try: \n",
    "    a=int(input())\n",
    "    print(fib(a))\n",
    "except Exception:\n",
    "    print(\"input one number only\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a0ac102b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2 4 2 2 2 2 "
     ]
    }
   ],
   "source": [
    "#Degree array\n",
    "def count():\n",
    "    '''Функция для поиска степеней вершин графа  \n",
    "    Parameters\n",
    "    ----------\n",
    "    al : list of 2 numbers\n",
    "        количество вершин и ребер\n",
    "    ver : list of 2 numbers\n",
    "        две соединенные вершины\n",
    "        \n",
    "    Returns\n",
    "    -------\n",
    "    Numbers\n",
    "        значение степеней каждой из вершин.\n",
    "    '''\n",
    "    al = list(map(int, input().split()))\n",
    "    l_of_deg=[]\n",
    "    for i in range(al[1]):\n",
    "        ver=list(map(int, input().split()))\n",
    "        for i in ver:\n",
    "            l_of_deg.append(i)\n",
    "    d=dict()\n",
    "    for i in range(1, al[0]+1):\n",
    "        d.update({i: l_of_deg.count(i)})\n",
    "    for key, value in d.items():\n",
    "        print(value, end=\" \")\n",
    "try:\n",
    "    count()\n",
    "except Exception:\n",
    "    print(\"only edge list format is allowed\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9360d2e1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "259861\n"
     ]
    }
   ],
   "source": [
    "#Insertion Sort\n",
    "def ins_sort(n, a):\n",
    "    '''Функция для сортировки вставкой   \n",
    "    Parameters\n",
    "    ----------\n",
    "    n : number\n",
    "        количество элементов списка\n",
    "    a : list\n",
    "        Стандартный список из чисел\n",
    "    \n",
    "    Returns\n",
    "    -------\n",
    "    Number\n",
    "        количество перестановок.\n",
    "    '''\n",
    "    c=0\n",
    "    for i in range(n):\n",
    "        k=i\n",
    "        while k>0 and a[k]<a[k-1]:\n",
    "            a[k-1],  a[k] = a[k], a[k-1]\n",
    "            c+=1\n",
    "            k-=1\n",
    "    print(c)\n",
    "try: \n",
    "    n=int(input())\n",
    "    a=list(map(int, input().split()))\n",
    "    ins_sort(n, a)\n",
    "except Exception:\n",
    "    print(\"only numbers are accepted\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a3c8ef99",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "197 211 225 195\n"
     ]
    }
   ],
   "source": [
    "#Counting DNA Nucleotides\n",
    "def count(s):\n",
    "    '''Функция для подсчета нуклеотидов\n",
    "    Parameters\n",
    "    ----------\n",
    "    s : srting\n",
    "        строка из нуклеотидов\n",
    "    Returns\n",
    "    -------\n",
    "    Numbers\n",
    "        количество каждого нуклеотида\n",
    "    \n",
    "    Raises\n",
    "    ------\n",
    "    AssertionError\n",
    "        Входной параметр содержит не только буквы нуклеотидов    \n",
    "        Входной параметр содержит числовые данные.'''\n",
    "    assert not any(char.isdigit() for char in s), \"must be string\"\n",
    "    valid_chars = {'A', 'C', 'G', 'T'}\n",
    "    assert all(char in valid_chars for char in s), \"must be only ACGT\"\n",
    "    print(f'{s.count(\"A\")} {s.count(\"C\")} {s.count(\"G\")} {s.count(\"T\")}')\n",
    "s=input()  \n",
    "count(s)  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1389602c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "GAUGGAACUUGACUACGUAAAUU\n"
     ]
    }
   ],
   "source": [
    "#Transcribing DNA into RNA\n",
    "def repl(s):\n",
    "    '''Функция преобразоваания цепи ДНК в РНК   \n",
    "    Parameters\n",
    "    ----------\n",
    "    s : string\n",
    "        строка из нуклеотидов\n",
    "    \n",
    "    Returns\n",
    "    -------\n",
    "    String\n",
    "        строка из нуклеотидов\n",
    "    \n",
    "    Raises\n",
    "    ------\n",
    "    AssertionError\n",
    "        Входной параметр содержит не только буквы нуклеотидов    \n",
    "        Входной параметр содержит числовые данные.'''\n",
    "    assert not any(char.isdigit() for char in s), \"must be string\"\n",
    "    valid_chars = {'A', 'C', 'G', 'T'}\n",
    "    assert all(char in valid_chars for char in s), \"must be only ACGT\"\n",
    "    print(s.replace(\"T\", \"U\"))\n",
    "s=input()\n",
    "repl(s)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a1348af4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "34121\n"
     ]
    }
   ],
   "source": [
    "#Complementing a Strand of DNA\n",
    "def rev_and_repl(s):\n",
    "    '''Функция создания комплементарной цепи ДНК   \n",
    "    Parameters\n",
    "    ----------\n",
    "    s : string\n",
    "        строка из нуклеотидов\n",
    "    \n",
    "    Returns\n",
    "    -------\n",
    "    String\n",
    "        строка из нуклеотидов\n",
    "    \n",
    "    Raises\n",
    "    ------\n",
    "    AssertionError\n",
    "        Входной параметр содержит не только буквы нуклеотидов    \n",
    "        Входной параметр содержит числовые данные.'''\n",
    "    assert not any(char.isdigit() for char in s), \"must be string\"\n",
    "    valid_chars = {'A', 'C', 'G', 'T'}\n",
    "    assert all(char in valid_chars for char in s), \"must be only ACGT\"\n",
    "    s=s[::-1]\n",
    "    s=s.replace(\"T\", \"*\")\n",
    "    s=s.replace(\"A\", \"T\")\n",
    "    s=s.replace(\"*\", \"A\")\n",
    "    s=s.replace(\"C\", \"*\")\n",
    "    s=s.replace(\"G\", \"C\")\n",
    "    s=s.replace(\"*\", \"G\")\n",
    "    print(s)\n",
    "s=input()\n",
    "rev_and_repl(s)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "597c3015",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "must be number\n"
     ]
    }
   ],
   "source": [
    "# Rabbits and Recurrence Relations\n",
    "def rabbits(n, k):\n",
    "    '''Функция подсчета потомства кроликов \n",
    "    Parameters\n",
    "    ----------\n",
    "    n : number\n",
    "        количество месяцев\n",
    "    k : number \n",
    "        количество пар от одной пары\n",
    "    Returns\n",
    "    -------\n",
    "    Number\n",
    "        количество пар.\n",
    "    '''\n",
    "    if n==1: return 1\n",
    "    elif n==2: return 1\n",
    "    else:\n",
    "        return rabbits(n-2, k)*k + rabbits(n-1, k)\n",
    "try: \n",
    "    n, k = map(int, input().split())\n",
    "    print(rabbits(n, k))\n",
    "except Exception:\n",
    "    print(\"must be two numbers\")\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "first_env",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.18"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
